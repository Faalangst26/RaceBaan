Index: Controller/Race.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Threading;\nusing System.Timers;\nusing Model;\n\nnamespace Controller\n{\n    public class Race\n    {\n        private Random _random;\n\n        private Dictionary<Section, SectionData> _positions;\n\n        private System.Timers.Timer timer;\n        public int NumofLaps { get; set; }\n\n        private int _NumberOfDrivers;\n\n        public event EventHandler<DriversChangedEventArgs> DriversChanged;\n\n\n\n        //private DriversChangedEventArgs DCEA = new DriversChangedEventArgs();\n\n        public Track track { get; set; }\n        public List<IParticipant> Participants { get; set; }\n        public DateTime StartTime { get; set; }\n\n        public Race(Track track, int numoflaps, List<IParticipant> participants)\n        {\n            Console.BackgroundColor = ConsoleColor.Black;\n            Console.WriteLine(\"Race constructor!\");\n            Thread.Sleep(1000);\n            this.track = track;\n            this.Participants = participants;\n            NumofLaps = numoflaps;\n            _NumberOfDrivers = Participants.Count;\n            foreach (var participant in Participants)\n            {\n                participant.DistanceTravelled = 0;\n                participant.LapsDone = 0;\n            }\n            _random = new Random(DateTime.Now.Millisecond);\n            timer = new System.Timers.Timer(500);\n            timer.Elapsed += OnTimedEvent;\n            setStartPositions();\n        }\n\n        public void Start()\n        {\n            timer.Start();\n\n        }\n\n        public void Stop()\n        {\n            Console.BackgroundColor = ConsoleColor.DarkRed;\n            Console.WriteLine(\"Race voorbij!\");\n            timer.Stop();\n            timer.Elapsed -= OnTimedEvent;\n            foreach (EventHandler<DriversChangedEventArgs> Eh in DriversChanged.GetInvocationList())\n            {\n                DriversChanged -= Eh;\n            }\n            Console.Clear();\n            Data.NextRace();\n        }\n\n        public void OnTimedEvent(object sender, EventArgs e)\n        {\n\n\n\n\n            if (DriversChanged != null) DriversChanged(this, new DriversChangedEventArgs(track)); //Drivers changed event afvuren\n            _NumberOfDrivers = Participants.Count;\n            foreach (IParticipant participant in Participants)\n            {\n                var driver = (Driver)participant;\n                participant.DistanceTravelled += driver.Performance * driver.Speed;\n                //Random failures\n                if (_random.Next(0, 9) > driver.Quality && driver.isBroken == false)\n                {\n                    //Failure\n                    driver.isBroken = true;\n                    driver.Speed = 0;\n                    driver.Name = driver.Name.Insert(0, \"X\");\n                }\n                if (driver.isBroken)\n                {\n\n                    if (_random.Next(0, 9) < driver.Quality)//Auto gerepareerd!\n                    {\n                        driver.isBroken = false;\n                        driver.Name = driver.Name.Remove(0, 1);\n\n                        driver.Speed = _random.Next(1, 20);\n                    }\n                } \n                else if (driver.LapsDone >= NumofLaps)\n                {\n\n                    Console.SetCursorPosition(0, 0);\n                    Console.WriteLine($\" {participant.Name} is klaar met de race!\");\n                    RemoveDriver(participant);\n                    _NumberOfDrivers--;\n                }\n                else if (participant.DistanceTravelled % 100 >= 1)//Bij elke 100 meter afgelegd\n                {\n                    MoveDriver(participant);\n\n                }\n                if (_NumberOfDrivers <= 0)\n                {\n\n                    Stop();\n                }\n\n            }\n\n            //if (StartCountdown < 0)//Race is gestart\n            //{\n            //    MoveDriver(Participants[0]);\n            //    MoveDriver(Participants[1]);\n            //    StartCountdown = 4;\n            //}\n\n        }\n\n\n\n        public void setStartPositions()\n        {\n            foreach (Section item in track.Sections)//Loop door Alle sections in de baan heen\n            {\n                if (item.SectionType.Equals(SectionTypes.StartGrid))//Alleen startposities op de startgrid\n                {\n                    foreach (var participant in Participants)\n                    {\n                        if (item.SectionData.Left == null)\n                        {\n                            item.SectionData.Left = participant;\n                        }\n                        else if (item.SectionData.Right == null)\n                        {\n                            item.SectionData.Right = participant;\n                        }\n                        else\n                        {\n                            return;\n                        }\n                    }\n                }\n\n            }\n        }\n\n        public void RemoveDriver(IParticipant participant)\n        {\n            foreach (var section in track.Sections)\n            {\n                if (section.SectionData.Left != null)\n                {\n                    if (section.SectionData.Left.Equals(participant))\n                    {\n                        section.SectionData.Left = null;\n\n                    }\n                }\n                else if (section.SectionData.Right != null)\n                {\n                    if (section.SectionData.Right.Equals(participant))\n                    {\n                        section.SectionData.Right = null;\n\n                    }\n                }\n            }\n\n        }\n\n        public void MoveDriver(IParticipant participant)\n        {\n            Boolean next = false;\n\n            foreach (var section in track.Sections)//Loop door de track heen en kijk waar de driver staat\n            {\n                if (section.SectionData.Left != null)\n                {\n                    if (section.SectionData.Left.Equals(participant))\n                    {\n                        section.SectionData.Left = null;\n                        next = true;\n                    }\n                }\n                else if (section.SectionData.Right != null)\n                {\n                    if (section.SectionData.Right.Equals(participant))\n                    {\n                        section.SectionData.Right = null;\n                        next = true;\n                    }\n                }\n                else if (next)//Verplaats de driver naar het volgende trackpiece\n                {\n                    if (section.SectionData.Left == null)\n                    {\n                        section.SectionData.Left = participant;\n                        next = false;\n                    }\n                    else if (section.SectionData.Right == null)\n                    {\n                        section.SectionData.Right = participant;\n                        next = false;\n                    }\n\n                }\n            }\n            if (next == true)//Als next nogsteeds true is, hebben we een rondje gecomplete en moet de driver naar het 1e slot op de baan en is er een ronde afgerond     \n            {\n                if (track.Sections.First.Value.SectionData.Left == null)\n                {\n                    track.Sections.First.Value.SectionData.Left = participant;\n                    participant.LapsDone++;      \n                }\n                else\n                {\n                    track.Sections.First.Value.SectionData.Right = participant;\n                    participant.LapsDone++;\n                }\n\n            }\n\n        }\n\n\n        public void RandomizeEquipment()\n        {\n            foreach (var participant in Participants)\n            {\n                participant.Equipment.Quality = _random.Next();\n                participant.Equipment.Performance = _random.Next();\n            }\n        }\n\n        public SectionData GetSectionData(Section section)\n        {\n\n            if (_positions[section] != null)\n            {\n                return _positions[section];\n            }\n            else\n            {\n                _positions.Add(section, new SectionData());\n                return _positions[section];\n            }\n        }\n\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Controller/Race.cs b/Controller/Race.cs
--- a/Controller/Race.cs	(revision fdd7419fd45fde4ed0cb58da96a30f523874130c)
+++ b/Controller/Race.cs	(date 1634316078522)
@@ -30,7 +30,6 @@
 
         public Race(Track track, int numoflaps, List<IParticipant> participants)
         {
-            Console.BackgroundColor = ConsoleColor.Black;
             Console.WriteLine("Race constructor!");
             Thread.Sleep(1000);
             this.track = track;
@@ -56,7 +55,6 @@
 
         public void Stop()
         {
-            Console.BackgroundColor = ConsoleColor.DarkRed;
             Console.WriteLine("Race voorbij!");
             timer.Stop();
             timer.Elapsed -= OnTimedEvent;
Index: Controller/Class1.cs
===================================================================
diff --git a/Controller/Class1.cs b/Controller/Class1.cs
deleted file mode 100644
--- a/Controller/Class1.cs	(revision fdd7419fd45fde4ed0cb58da96a30f523874130c)
+++ /dev/null	(revision fdd7419fd45fde4ed0cb58da96a30f523874130c)
@@ -1,8 +0,0 @@
-using System;
-
-namespace Controller
-{
-    public class Class1
-    {
-    }
-}
